%% RNA Scope Image Analysis - Written by Vasu Shandar & Kevin Coffey 2020
% Filters image by adjustable standards to output overlap between cell
% types and gene compounds 
% FilteredRNA = RNAScopeFiltering(image) Returns table of calculations
% about the imput image using default values for adjustable variables
% FilteredRNA = RNAScopeFiltering(image, Options) Returns table of
% calcualtions but allows user to adjust specific variables 
% Options = ['DiskSize', 'ShowAnalysisFigures', 'ShowFinalFigure',
% 'Radius', 'RedCellThreshold', 'GreenCellThreshold', 'AreaFilter']


function RNAScopeFiltering = PhillipRNAScopeFiltering(fname, Options)


if ~isfield(Options, 'DiskSize')
    Options.DiskSize = 40;
end 

if ~isfield(Options, 'ShowAnalysisFigures') 
    Options.ShowAnalysisFigures = true;
end

if ~isfield(Options, 'ShowFinalFigure')
   Options.ShowFinalFigure = true;
end

if ~isfield(Options, 'Radius')
   Options.Radius = 20;
end

if ~isfield(Options, 'RedCellThreshold') 
   Options.RedCellThreshold = 40000;
end

if ~isfield(Options, 'GreenCellThreshold')
   Options.GreenCellThreshold = 40000;
end

if ~isfield(Options, 'FarRedCellThreshold')
   Options.FarRedCellThreshold = 40000;
end

if ~isfield(Options, 'AreaFilter')
   Options.AreaFilter =[250 2500];
end 
    
[imR, cmap] = imread(fname, 1) ; % read in first image
[imG, cmap] = imread(fname, 2) ; % read in first image
[imB, cmap] = imread(fname, 3) ; % read in first image
[imFR, cmap] = imread(fname, 4) ; % read in first image
% [~,imName] = fileparts(fname);
%% Original Unedited Figure
if Options.ShowAnalysisFigures == 1
    figure('Color','k')
    im=imread(fname);
    f = imshow(im);
end 

%% Extract Blue Channel for Dapi Segmentation

% Subtract the uneven background from the image
se = strel('disk',Options.DiskSize);
imgblue = imtophat(imB,se);

% Binarize Image
bw_blue = imbinarize(imgblue,'adaptive','ForegroundPolarity','bright');
%bw_blue = imbinarize(imgblue);
% f = imshow(bw_blue);

% % Remove Clumping
bw_blue = bwareafilt(bw_blue,Options.AreaFilter);
%f = imshow(bw_blue);

se = strel('disk',3);
bw_blue = imerode(bw_blue,se);

% Look for connected components
cc_blue = bwconncomp(bw_blue, 8);

% Create Dapi Centroids
radius = Options.Radius;
s = regionprops(cc_blue,'centroid');
centroids = cat(1, s.Centroid);

% Remove centroids touching the border (hard to look inside the partial circles)
NotAtBorder = centroids(:,1) < size(imgblue,2) - (radius + 1) &...
centroids(:,1) > radius + 1 &...
centroids(:,2) < size(imgblue,1) - (radius + 1) &...
centroids(:,2) > radius + 1;
centroids = centroids(NotAtBorder,:);  
cell_radious(1:length(centroids),1)=20;

%Show Cell Identification
if Options.ShowAnalysisFigures == 1
    figure;
    f = imshow(imgblue)
    hold on
    viscircles(centroids,cell_radious,'LineStyle','-','LineWidth',.1,'Color','cyan');
end 
blue_cells = sum(cell_radious == 20);
%% Extract Red Channel for Signal Segmentation
imgred = imR;

%% Extract Green Channel for Signal Segmentation
imggreen = imG;

%% Extract Far Red Channel for Signal Segmentation
imgfarred = imFR;

%% Green & Red per Cell (clever trick to use the strel function to
% approximate a circle)
SE = strel('disk',radius,0);

%% create indicies of the circle in reference to the centroid
circle = find(SE.Neighborhood);
[I,J] = ind2sub(size(SE.Neighborhood),circle);
I = I - radius - 1;
J = J - radius - 1;
dist = sqrt(J.^2 + I.^2);
[dist,distIdx] = sort(dist,'ascend');
I = I(distIdx);
J = J(distIdx);

%% Prealocate Arrays for Signal Quantification 
red_Size = zeros(length(centroids),1);
green_Size = zeros(length(centroids),1);
farred_Size = zeros(length(centroids),1);
red = zeros(length(centroids),length(I),'uint8');
green = zeros(length(centroids),length(I),'uint8');
blue = zeros(length(centroids),length(I),'uint8');
farred = zeros(length(centroids),length(I),'uint8');

%% Create index of each cell within the full image
for j=1:length(centroids)
% Index of cell    
cellIndex = sub2ind(size(imgblue),round(centroids(j,2)) + I,round(centroids(j,1)) + J);

% Total RNA Scope Signal/ Cell
red(j,:) = imgred(cellIndex);
green(j,:)= imggreen(cellIndex);
blue(j,:)= imgblue(cellIndex);
farred(j,:)= imgfarred(cellIndex);

[sorted_r, ~] = sort(red(j,:),'descend');
red_Size(j) = sum(sorted_r(1:floor(length(sorted_r)/20)));

[sorted_g, ~] = sort(green(j,:),'descend');
green_Size(j) = sum(sorted_g(1:floor(length(sorted_g)/20)));

[sorted_b, ~] = sort(blue(j,:),'descend');
blue_Size(j) = sum(sorted_b(1:floor(length(sorted_b)/20)));

[sorted_fr, ~] = sort(farred(j,:),'descend');
farred_Size(j) = sum(sorted_fr(1:floor(length(sorted_fr)/20)));

%red_Size(j) = sum(imgred(cellIndex));
%green_Size(j)=sum(imggreen(cellIndex));
end

% Threshold Cells
if Options.ShowAnalysisFigures == 1
figure;
histfit(red_Size);
    title('Max Red');
end

if Options.ShowAnalysisFigures == 1
figure;
histfit(green_Size);
    title('Max Green');
end

RedCellThresh = Options.RedCellThreshold;
GreenCellThresh = Options.GreenCellThreshold;
%BlueCellThresh = Options.BlueCellThreshold;
FarredCellThresh = Options.FarRedCellThreshold;

rgbImage = cat(3, imR, imG, imFR);

% Insert Circles
 R=insertShape(rgbImage,'circle',[centroids(red_Size>RedCellThresh,:) cell_radious(red_Size>RedCellThresh)],'Color','red','LineWidth',2);

 G=insertShape(rgbImage,'circle',[centroids(green_Size>GreenCellThresh,:) cell_radious(green_Size>GreenCellThresh)],'Color','green','LineWidth',2);
 FR=insertShape(rgbImage,'circle',[centroids(farred_Size>FarredCellThresh,:) cell_radious(farred_Size>FarredCellThresh)],'Color','blue','LineWidth',2);
 
 G_R_circles=insertShape(R,'circle',[centroids(green_Size>GreenCellThresh,:) cell_radious(green_Size>GreenCellThresh)],'Color','green','LineWidth',2);
 FR_G_circles=insertShape(G,'circle',[centroids(farred_Size>FarredCellThresh,:) cell_radious(farred_Size>FarredCellThresh)],'Color','blue','LineWidth',2);
 FR_R_circles=insertShape(R,'circle',[centroids(farred_Size>FarredCellThresh,:) cell_radious(farred_Size>FarredCellThresh)],'Color','blue','LineWidth',2);
 FR_R_G_circles=insertShape(G_R_circles,'circle',[centroids(farred_Size>FarredCellThresh,:) cell_radious(farred_Size>FarredCellThresh)],'Color','blue','LineWidth',2);

 R_G_intersect =insertShape(G_R_circles,'circle',[centroids(green_Size>GreenCellThresh & red_Size>RedCellThresh,:) cell_radious(green_Size>GreenCellThresh & red_Size>RedCellThresh,:)],'Color','yellow','LineWidth',2);
 R_FR_intersect = insertShape(FR_R_circles,'circle',[centroids(red_Size>RedCellThresh & farred_Size > FarredCellThresh,:) cell_radious(red_Size>RedCellThresh & farred_Size > FarredCellThresh,:)],'Color','magenta','LineWidth',2);
 G_FR_intersect =insertShape(FR_G_circles,'circle',[centroids(green_Size>GreenCellThresh & farred_Size > FarredCellThresh,:) cell_radious(green_Size>GreenCellThresh & farred_Size > FarredCellThresh,:)],'Color','yellow','LineWidth',2);
 R_G_FR_intersect=insertShape(FR_R_G_circles,'circle',[centroids(green_Size>GreenCellThresh & red_Size>RedCellThresh & farred_Size > FarredCellThresh,:) cell_radious(green_Size>GreenCellThresh & red_Size>RedCellThresh & farred_Size > FarredCellThresh,:)],'Color','yellow','LineWidth',2);

if Options.ShowAnalysisFigures == 1 
    figure;
    solo_red = imshow(R);
    title('Solo A2A' );
    figure;
    solo_green = imshow(G);
    title('Solo pdyn' );
    figure;
    solo_farred = imshow(FR);
    title('Solo 5ht1b' );
    figure;
    R_G_intersect_image = imshow(R_G_intersect);
    title('A2A-pdyn Intersect' );
    figure;
    R_FR_intersect_image = imshow(R_FR_intersect);
    title('pdyn-5ht1b Intersect' );
    figure;
    G_FR_intersect_image = imshow(G_FR_intersect);
    title('A2A-5ht1b Intersect' );
    figure;
    R_G_FR_intersect_image = imshow(R_G_FR_intersect);
    title('pdyn-5ht1b-A2A Intersect' );
end 
%analysis_images = cat(3, solo_red, solo_green, solo_farred, R_G_intersect_image, R_FR_intersect_image, G_FR_intersect_image, R_G_FR_intersect_image);
%analysis_images_1 = [R, R, R; G; FR; R_G_intersect; R_FR_intersect; G_FR_intersect; R_G_FR_intersect];
%imshow(analysis_images_1(:,:,5));

%imwrite(analysis_images_1, "image_one.tif");

if Options.ShowFinalFigure == 1
    figure;
    f=imshow(R_G_FR_intersect);
end 

% Final Numbers
AllMergeCells=sum(red_Size>RedCellThresh & green_Size>GreenCellThresh & farred_Size>FarredCellThresh);

greenCells=sum(green_Size>GreenCellThresh);
redCells=sum(red_Size>RedCellThresh);
farredCells=sum(farred_Size>FarredCellThresh);

Percent_R = sum(red_Size>RedCellThresh) / blue_cells *100;
Percent_G = sum(green_Size>GreenCellThresh) / blue_cells *100
Percent_FR = sum(farred_Size>FarredCellThresh) / blue_cells *100
Percent_R_G = sum(red_Size>RedCellThresh & green_Size>GreenCellThresh) / blue_cells *100;
Percent_R_FR = sum(red_Size>RedCellThresh & farred_Size>FarredCellThresh) / blue_cells *100;
Percent_G_FR = sum(green_Size>GreenCellThresh & farred_Size>FarredCellThresh) / blue_cells *100;
Percent_R_G_FR = AllMergeCells/(blue_cells) * 100;

G_R_Intersect = sum(red_Size>RedCellThresh & green_Size>GreenCellThresh) / (redCells + greenCells) *100;
FR_R_Intersect = sum(red_Size>RedCellThresh & farred_Size>FarredCellThresh) / (redCells + farredCells) *100;
G_FR_Intersect = sum(green_Size>GreenCellThresh & farred_Size>FarredCellThresh) / (greenCells + farredCells) *100;

% Extract ID from the filename somehow. This will be unique to experiments.
[pathstr,name,ext] = fileparts(fname)

% need MergeCells between: (green, red, blue), (green, farred, blue), (red,
% farred, blue)

A2A_pdyn_5ht1b_cell_count = AllMergeCells; 
total_cell_count = blue_cells; 
cell_count_A2A = redCells;
cell_count_pdyn = greenCells;
cell_count_5ht1b = farredCells;
percent_A2A = Percent_R;
percent_pdyn = Percent_G;
percent_5ht1b = Percent_FR;
percent_total_A2A_pdyn = Percent_R_G;
percent_total_A2A_5ht1b = Percent_R_FR;
percent_total_pdyn_5ht1b = Percent_G_FR;
percent_total_pdyn_5ht1b_A2A = Percent_R_G_FR;
percent_intersect_pdyn_A2A = G_R_Intersect;
percent_intersect_pdyn_5ht1b = G_FR_Intersect;
percent_intersect_A2A_5ht1b = FR_R_Intersect;

T = {name, A2A_pdyn_5ht1b_cell_count, total_cell_count, cell_count_A2A, cell_count_pdyn, cell_count_5ht1b, percent_A2A, percent_pdyn, percent_5ht1b, percent_total_A2A_pdyn, percent_total_A2A_5ht1b, percent_total_pdyn_5ht1b, percent_total_pdyn_5ht1b_A2A, percent_intersect_pdyn_A2A, percent_intersect_A2A_5ht1b, percent_intersect_pdyn_5ht1b};
L = cell2table(T,...
'VariableNames',{name, A2A_pdyn_5ht1b_cell_count, total_cell_count, cell_count_A2A, cell_count_pdyn, cell_count_5ht1b, percent_A2A, percent_pdyn, percent_5ht1b, percent_total_A2A_pdyn, percent_total_A2A_5ht1b, percent_total_pdyn_5ht1b, percent_total_pdyn_5ht1b_A2A, 'percent_intersect_pdyn_A2A', 'percent_intersect_A2A_5ht1b', 'percent_intersect_pdyn_5ht1b'});

RNAScopeFiltering = cell2table{name, A2A_pdyn_5ht1b_cell_count, total_cell_count, cell_count_A2A, cell_count_pdyn, cell_count_5ht1b, percent_A2A, percent_pdyn, percent_5ht1b, percent_total_A2A_pdyn, percent_total_A2A_5ht1b, percent_total_pdyn_5ht1b, percent_total_pdyn_5ht1b_A2A, percent_intersect_pdyn_A2A, percent_intersect_A2A_5ht1b, percent_intersect_pdyn_5ht1b};


end 